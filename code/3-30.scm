(load "3.3.4.scm")

(define (dd x) (display x) (display " "))

(define (ripple-carry-adder A B S C) ; assuming that A/B/S have the same length
    (define (adder A B c-in S c-out)
        (if (null? A)
            (set-signal! C (get-signal c-in))
            (let ((a (car A))
                  (b (car B))
                  (s (car S)))
                ;(dd a) (dd b) (dd c-in) (dd "-> ") (dd s) (dd c-out) (newline)
                (full-adder a b c-in s c-out)
                (adder (cdr A) (cdr B) c-out (cdr S) (make-wire)))))
    (define c-in (make-wire))
    (define c-out (make-wire))
    (set-signal! c-in 0)
    (set-signal! c-out 0)
    (adder A B c-in S c-out))

(define A '((1) (1) (0) (1)))
(define B '((1) (1) (1) (0)))
(define S '((0) (0) (0) (0)))
(define C (make-wire))

(D A)

(ripple-carry-adder A B S C)
(D A)
(D B)
(set-signal! (car A) 1)
(D A)
(D B)
(D S)
(D c)
