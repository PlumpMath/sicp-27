#lang racket

;;  显示分派的通用型操作
;;      容易读懂，适合用于阐述，实际使用时改动较多
;;      新增类型时：
;;          需要避免函数、类型的命名冲突
;;          在每一个需要分派的地方增加类型判断、相应调用
;;      新增操作：
;;          为每一个类型添加相应操作，并在需要调用的地方判断类型
;;
;;  数据导向的风格
;;      各个模块之间解耦，新增但需要依赖于一个表
;;      新增类型时：
;;          新增一个模块，在需要用的地方引入，并调用 install-package 增加相应表项
;;      新增操作：
;;          为每一个类型添加相应操作
;;
;;  消息传递的风格
;;      各个模块之间充分解耦，所有数据和操作封装于“对象”内部
;;      新增类型时：
;;          新增一个模块，在需要的地方引入即可
;;      新增操作：
;;          为每一个类型添加相应操作
;;
;;  后两种貌似都适合……
